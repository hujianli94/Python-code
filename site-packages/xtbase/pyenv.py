#coding=utf8
__author__ = 'xujun'

from os import popen, name
from json import loads
import sys, os
import re

def getWindowsPath():
    ret = __file__.split("\\")
    pathList = []
    for p in ret:
        pathList.extend(p.split("/"))
    path = "/".join(pathList[0:-3])
    path = path + "/config"
    return path

def getConfig(param):
    f = None
    if str(name).startswith("nt"):
        rawDir = os.path.abspath(os.curdir)
        dir = getWindowsPath()
        os.chdir(dir)
        f = popen("lua ../config/config.lua %s" % param)
        os.chdir(rawDir)
    else:
        sys.path.append("/home/rzrk/server/config/")
        f = popen("cd /home/rzrk/server/config/; /usr/local/bin/lua /home/rzrk/server/config/config.lua %s" % param)
    d = f.read()
    config = loads(d)
    return config

def getMysqlConfig():
    d = getConfig("g_mysql_config")
    ret = {
        "host" : d["m_host"],
        "port" : int(d["m_port"]),
        "user" : d["m_user"],
        "passwd" : d["m_password"],
        "db" : d["m_db"],
        "charset" : "utf8"
    }
    return ret

def getRedisConfig():
    d = getConfig("g_redisAddress")
    ret = {
        "host" : d["m_redisHost"],
        "port" : d["m_redisPort"],
    }
    return ret

def getAddress(tag):
    defaultPorts = getConfig("g_defaultPorts")
    return defaultPorts[tag]


def getPlatformInfo():
    param = "getPlatformInfo"
    if str(name).startswith("nt"):
        rawDir = os.path.abspath(os.curdir)
        dir = getWindowsPath()
        os.chdir(dir)
        f = popen("lua ../config/config.lua %s" % param)
        os.chdir(rawDir)
    else:
        sys.path.append("/home/rzrk/server/config/")
        f = popen("cd /home/rzrk/server/config/; /usr/local/bin/lua /home/rzrk/server/config/config.lua %s" % param)
    platformStr = f.read()

    configList = re.split('\n', platformStr)
    configDict = {}
    start = False
    for configStr in configList:
        if re.search('FUTURE_SUBSCRIBE_PRODUCTS', configStr):
            start = True
            continue
        if start:
            productlist = re.split('=', configStr)
            if len(productlist) < 2:
                break
            try:
                configDict[productlist[0]] = productlist[1]
            except:
                print "calcConfigEnv.lua文件配置不对"

    return configDict


if __name__ == "__main__":
    print getMysqlConfig()